{"version":3,"sources":["components/Robot.js","3d/3d.js","App.js","reportWebVitals.js","index.js"],"names":["Robot","_ref","colorMap","normalMap","roughnessMap","metalnessMap","emissiveMap","aoMap","_useGLTF","useGLTF","scene","nodes","materials","console","log","useLayoutEffect","Object","assign","map","react_default","a","createElement","rotation-y","Math","PI","castShadow","object","scale","Scene","_useLoader","useLoader","THREE","_useLoader2","slicedToArray","texture","normalTexture","colorTexture","style","position","width","height","react_three_fiber_esm","shadows","background","intensity","angle","Robot_Robot","Text3D","font","Stars","shapes","receiveShadow","rotation-x","args","side","DoubleSide","attach","color","displacementScale","displacementMap","metalness","OrbitControls","PerspectiveCamera","makeDefault","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.49ce7f6e.chunk.js","sourcesContent":["import React, { useLayoutEffect }from 'react';\nimport { useGLTF } from '@react-three/drei';\n\nexport const Robot = ({colorMap, normalMap, roughnessMap, metalnessMap, emissiveMap, aoMap}) => {\n    const { scene, nodes, materials } = useGLTF('StandPose.gltf');\n    console.log(nodes, scene, materials);\n    useLayoutEffect(() => {\n      Object.assign(materials[\"\"], { \n        metalnessMap: metalnessMap,\n        normalMap: normalMap,\n        aoMap: aoMap,\n        roughnessMap: roughnessMap,\n        map: colorMap,\n        emissiveMap: emissiveMap})\n    }, [scene, nodes, materials, colorMap, normalMap, roughnessMap, metalnessMap, emissiveMap, aoMap]);\n\n    console.log(materials);\n    console.log(scene);\n    return <primitive rotation-y = {Math.PI} castShadow object={scene} scale = {0.003} />\n};","import React, {Suspense} from 'react'\nimport { useRef, useState } from 'react'\nimport {OrbitControls, PerspectiveCamera, Stars, Plane, useTexture, Text3D} from \"@react-three/drei\";\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\nimport {useFrame, Canvas, useLoader } from '@react-three/fiber'\nimport { DoubleSide, TextureLoader } from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { useGLTF } from '@react-three/drei'\nimport { Robot } from '../components/Robot';\nimport * as THREE from \"three\";\n\nfunction Box(props) {\n  // This reference gives us direct access to the THREE.Mesh object\n  const ref = useRef()\n  // Hold state for hovered and clicked events\n  const [hovered, hover] = useState(false)\n  const [clicked, click] = useState(false)\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  // useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n  // Return the view, these are regular Threejs elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={clicked ? 1.5 : 1}\n      onClick={(event) => click(!clicked)}\n      onPointerOver={(event) => hover(true)}\n      onPointerOut={(event) => hover(false)}>\n  \n      <boxGeometry args={[9, 9, 9]} />\n      <meshStandardMaterial side = {DoubleSide} color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\nfunction ModelLoader(props){\n    const gltf = useLoader(GLTFLoader, 'StandPose.gltf');\n    // const props = useTexture({\n    //   map: 'PavingStones092_1K_Color.jpg',\n    //   displacementMap: 'PavingStones092_1K_Displacement.jpg',\n    //   normalMap: 'PavingStones092_1K_Normal.jpg',\n    //   roughnessMap: 'PavingStones092_1K_Roughness.jpg',\n    //   aoMap: 'PavingStones092_1K_AmbientOcclusion.jpg',\n    // });\n    // return <primitive {...props} object={obj} />\n    return <primitive {...props} object={gltf.scene} scale = {0.001}/>\n\n      // <mesh>\n        {/* <meshStandardMaterial {...props} /> */}\n\n      // </mesh>\n        \n}\n\nfunction CameraHelper(){\n  const camera = new PerspectiveCamera(60,1,1,3);\n  return <cameraHelper args = {[camera]}/>;\n}\nexport default function Scene(){\n    const [colorMap, normalMap, roughnessMap, metalnessMap, emissiveMap, aoMap] = useLoader(THREE.TextureLoader, [ \n      './small-robot/textures/Body_albedo.jpg',\n      './small-robot/textures/Body_normal.jpg', \n      './small-robot/textures/Body_roughness.jpg', \n      './small-robot/textures/Body_metallic.jpg',\n      './small-robot/textures/Body_emissive.jpg',\n      './small-robot/textures/Body_AO.jpg'\n    ]) \n    // const texture = useTexture('./Snow_002_DISP.png')\n\n    const texture = useLoader(THREE.TextureLoader, './Snow_002_DISP.png');\n    const normalTexture = useLoader(THREE.TextureLoader, './Snow_002_NORM.jpg');\n    const colorTexture = useLoader(THREE.TextureLoader, './Snow_002_COLOR.jpg');\n\n    return(\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100vh\" }}>\n      <Canvas  shadows style={{ background: \"black\" }} >\n          <ambientLight intensity={2} />\n          <directionalLight castShadow position={[3, 6, 10]} angle={0.15} /> \n          {/* <pointLight castShadow intensity = {2} position={[0, 3, 4]} /> */}\n          {/* {/* <Box position={[-1.2, 0, 0]} /> */}\n          {/* <Box position={[0, 0, 0]}  scale = {6}/> */}\n          <Robot\n            colorMap={colorMap} \n            normalMap={normalMap} \n            roughnessMap={roughnessMap} \n            metalnessMap={metalnessMap}\n            emissiveMap = {emissiveMap}\n            aoMap = {aoMap}\n          />\n          <Text3D font={'IBM Plex Sans_Bold.json'} position = {[0,3,4]} rotation-y = {Math.PI/2}>\n            Hello world!\n            <meshNormalMaterial />\n          </Text3D>\n          {/* <ModelLoader scale = {0.002}></ModelLoader> */}\n          <Stars />\n          <Plane receiveShadow position = {[0,1.6,0]} rotation-x={Math.PI / 2} args={[64, 64, 1024, 1024]}>\n            <meshStandardMaterial side = {DoubleSide} attach=\"material\" color=\"white\" displacementScale={4} displacementMap ={texture} map = {colorTexture} normalMap = {normalTexture} metalness={0.2} />\n          </Plane>\n          {/* <axesHelper /> */}\n          <OrbitControls />\n          <PerspectiveCamera position={[9, 0.5, 0]} makeDefault />\n\n      </Canvas>\n    </div>\n    )\n}\n\n","import React from 'react'\nimport './App.css';\nimport Scene from './3d/3d'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Scene></Scene>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}